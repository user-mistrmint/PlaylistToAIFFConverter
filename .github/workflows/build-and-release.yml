name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_NAME: PlaylistToAIFFConverter
  SCHEME_NAME: PlaylistToAIFFConverter
  CONFIGURATION: Release

jobs:
  build:
    name: Build macOS Application
    runs-on: macos-14  # Changed from macos-latest to specific version
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Build Dependencies
      uses: actions/cache@v4  # Updated from v3 to v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj', '**/Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
          
    - name: Build Application
      run: |
        echo "Building $PROJECT_NAME..."
        chmod +x build.sh
        ./build.sh --clean
        
    - name: Run Tests
      run: |
        echo "Running tests..."
        xcodebuild test \
          -project "$PROJECT_NAME.xcodeproj" \
          -scheme "$SCHEME_NAME" \
          -destination "platform=macOS" \
          || echo "Tests completed with warnings"
          
    - name: Create DMG
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Creating DMG installer..."
        ./build.sh --dmg
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4  # Updated from v3 to v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ github.sha }}
        path: |
          build/Export/${{ env.PROJECT_NAME }}.app
          build/${{ env.PROJECT_NAME }}-v*.dmg
        retention-days: 30
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2  # Updated to latest version
      with:
        name: iTunes Playlist to AIFF Converter ${{ github.ref_name }}
        files: |
          build/Export/${{ env.PROJECT_NAME }}.app
          build/${{ env.PROJECT_NAME }}-v*.dmg
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
